Corporate Technical Account Manager @ Redis Labs
We are looking for a Corporate Technical Account Manager to join our Customer Success team in our Mountain View or Austin Offices. 
As a Corporate Technical Account Manager, you will be the technical liaison for top-tier clients, serving as the subject matter expert on all-things-technical regarding the Redis Labs platform.
The successful candidate will be a technically savvy multi-tasker with a “can do” attitude, a love for challenges, and a customer-first mind. Above all, a focus on world-class client service is key.
If you are level headed, comfortable in a fast-paced, ever-evolving environment, and truly service-oriented with a willingness to go the extra mile to support clients, then this is the right challenge for you.
We’re Redis Labs, the home of the open-source Redis database platform and commercial provider of Redis Enterprise. A recognized leader in NoSQL, in-memory databases with more than 7,400 enterprise customers around the world, we’re growing fast—we’ve raised more than $246 million in funding and are growing our staff across our offices in Mountain View, Calif.; London; Tel Aviv; and Austin, Texas. In the past year alone, Redis Labs has been named to Deloitte’s Technology Fast 500 EMEA, earned a spot on Dun & Bradstreet’s 10 Best Startups to Work for in Israel, and been ranked one of the healthiest employers in the Bay Area.
Responsibilities
Do the ???onboarding to help clients’ start to use Redis Labs’ technological platform.
Develop a !!!strong working relationship with clients and !!!become their trusted advisor.
Provide Enhanced Corporate Support and be the liaison between the technical support and the customer on any support issues.
Collaborate with team leaders and managers across Redis Labs’ international offices to initiate and drive new processes that streamline product delivery.
Requirements
3+ years of experience in pre/post sales engineering (???ideally database engineering)
	database engineer
		database engineer interview questions
	database engineering
	database engineering redis interview questions
		https://www.javatpoint.com/redis-interview-questions-and-answers
		
		1) What is Redis?

		Redis is an open-source, advance key value data store and ???cache. It is also referred as a data structure server which keys not only contains strings, but ???also hashes, sets, lists, and sorted sets.
			https://stackoverflow.com/questions/12354515/what-is-the-difference-between-sets-and-lists-in-python
		
		2) What is the meaning of Redis?

		Redis stands for REmote DIctionary Server.
		
		3) How is Redis different from other databases?

		Redis is a NoSQL, Opensource, in-memory data-structure store. It follows the principle of key-value store.
		
		mostly used for ???cache solution and ???session management. It creates unique keys for store values.
		
		can function as a NoSQL ???database or as a ???memory-cache store to improve performance when serving data that is stored in system memory.
		
		6) How to interect with Redis?

		After the installation of the server you can run the Redis Client provided by redis installation or you can open the command prompt and use the following command:
		
		twitter, Github, Stackoverflow etc. are the most popular companies using Redis.
		
		8) What are the main features of Redis?

		Following are the main features of Redis:

			Redis is very simple to install setup and manage.
			Redis is very fast. It can execute 100000 queries per second.
			Redis is fast because data is being ???persistent in memory as well as stored on the disk.
			Redis is very fast because it loads the ???whole dataset in primary memory.
			Redis operations working on different data types are atomic so these operations can be accomplished safely i.e. to set or increase a key, add or remove elements from a set or increase a counter.
			It supports various types of data structure such as strings, hashes, sets, lists, sorted sets etc.
			Redis supports a variety of languages i.e. C, C++, C#, Ruby, Python, Twisted Python, PHP, Erlang, Tcl, Perl, Lua, Java, Scala etc.
			If your favorite language is not supported yet, you can write your own client library, as the Protocol is pretty simple.
			Redis supports simple master to slave replication.
			Redis is portable.

		https://www.javatpoint.com/redis-tutorial
		
		9) Explain the Replication Features of Redis?

		Replication is important in order to archive high level of availability in big data systems. The data needs to be replicated at n number of places. This follows the master-slave approach where the master copy is maintained by master-slave and replicated to n other nodes
		
		10) What are the advantages of using Redis?

		Following is a list of some important advantages of Redis:

			Redis is very fast.
			It supports a server-side locking.
				The lock server grants the requested lock to one client at a time. When a client is done with the granted lock, it sends a release request to the server so the server can grant the lock to another client who also tried to acquire it in the past
			It has a rich ???client side library.
			It is a good counter.
			It supports Atomic Operation.
					Either all of the commands or none are processed, so a Redis transaction is also atomic.
					so if a client loses the connection to the server in the context of a transaction before calling the EXEC command none of the operations are performed

			
			
			11) What are the disadvantages/limitations of using Redis?

			Following are the disadvantages/ limitations of Redis:

				It is single threaded.
				It has got limited client support for ???consistent hashing.
				It has significant ???overhead for persistence.
				It is ???not deployed widely.

			https://redis.io/topics/data-types
				Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects (e.g. A User with a number of fields like name, surname, age, and so forth):

				HMSET user:1000 username antirez password P1pp0 age 34
				HGETALL user:1000
				HSET user:1000 password 12345
				HGETALL user:1000

			12) What is the difference between Redis and RDBMS?

			There are a lot of differences between Redis and RDBMS:

				Redis is a NoSQL database while RDBMS is an SQL database.
				Redis follows the key-value structure while RDBMS follows the table structure.
				Redis extremely fast while RDBMS is comparatively slow.
				Redis stores all the dataset in primary memory while RDBMS stores its dataset in secondary memory.
				Redis is generally used to store small and frequently used files while RDBMS is used to store big files.
				Redis provides only official support for Linux, BSD, Mac OS X, Solaris. It doesn?t provide official support for Windows currently while RDBMS provides support for both.

Hands-on experience with ???server-side software development and !!Linux
Practical hands-on experience with a major cloud provider (AWS, Azure or GCP)
Experience in proactively growing customer relationships within an account while expanding their understanding of the customer’s business
Strong technical skills with which to assess and address the client’s’ needs and challenges
Strong  verbal and written communication, organization, multitasking, and time management skills
Proven multitasking and prioritization skills
A Bachelor degree from a University is a must—preferably in Computer Science
Advantages
Demonstrable proficiency with at least one programming language (Java, C#, Python, Javascript)
Experience with ???NoSQL databases or ???distributed caches
As an equal opportunity employer, Redis Labs Inc. is committed to a diverse workforce. Employment decisions regarding recruitment and selection will be made without discrimination based on race, color, religion, national origin, gender, age, sexual orientation, physical or mental disability, genetic information or characteristic, gender identity and expression, veteran status, or other non-job related characteristics or other prohibited grounds specified in applicable federal, state and local laws. Please view the ‘EEO is the Law’ poster.

redis vs memcached

aws redis

Redis (/ˈrɛdɪs/;[6][7] Remote Dictionary Server)[6] is an in-memory data structure store, used as a distributed, in-memory key–value database, cache and message broker, with ???optional durability.



Redis now delivers sub-millisecond response times enabling millions of requests per second for real-time applications in Gaming, Ad-Tech, Financial Services, Healthcare, and IoT. Redis is a popular choice for caching, session management, gaming, leaderboards, real-time analytics, geospatial, ride-hailing, chat/messaging, media streaming, and pub/sub apps.

???elasticache vs redis
	 Amazon ElastiCache Fully managed in-memory data store, compatible with Redis or Memcached. Power real-time applications with sub-millisecond latency.


Amazon ElastiCache offers fully managed Redis,

Redis is a NoSQL in-memory data structure store that can persist on disk. 

 There are 5 data types in Redis - Strings, Sets, Hash, Lists and Sorted Sets.
 
 
 
While the application memory used for the local cache may not be very big, the time needed in order to access the local computer memory is orders of magnitude smaller compared to asking a networked service like a database. Since often the same small percentage of data are accessed very frequently this pattern can greatly reduce the latency for the application to get data and, at the same time, the load in the database side.

	Caching improves application response time by storing copies of the most frequently used data on ephemeral but very fast storage. In-memory caching solutions, which hold the working set in speedy DRAM instead of slow spinning disks, can be extremely effective at achieving these goals. While caching is commonly used to improve application latency, a highly available and resilient cache can also help applications scale. Offloading responsibilities from the application’s main logic to the caching layer frees up compute resources to process more incoming requests.
	
		
	User session data

	Caching user session data is an integral part of building scalable and responsive applications. Because every user interaction requires access to the session’s data, keeping that data in the cache speeds response time to the application user. Holding session data in the cache is better than keeping sessions sticky at the load-balancer level, because caching allows the requests to be processed by any app server without losing users’ states, while a load-balancer approach effectively forces all requests in a session to be processed by a single app server.

		
	Fast access to API responses Storing the API’s reply in cache, even if only briefly, improves application performance by avoiding this inter-process communication.
			

	Modern applications are built using loosely coupled components that communicate via APIs. Application components use the APIs to make requests for service from other components, whether inside (microservices architecture) or outside (in a Software-as-a-Service use case) the application itself. Storing the API’s reply in cache, even if only briefly, improves application performance by avoiding this inter-process communication.
			
	A problem with the above pattern is how to invalidate the information that the application is holding, in order to avoid presenting stale data to the user. For example after the application above locally cached the user:1234 information, Alice may update her username to Flora. Yet the application may continue to serve the old username for user 1234
	
	https://redis.io/topics/client-side-caching
	
	
https://db-engines.com/en/system/Amazon+DynamoDB%3BRedis
	ScaleGrid for Redis: Fully managed hosting for Redis on AWS, Azure and DigitalOcean with high availability and SSH access on the #1 multi-cloud DBaaS.
	
Sharding
	sharding implies the data is spread across multiple computers 
	
https://db-engines.com/en/system/MongoDB%3BRedis


FULL REDIS COURSE: Please Use This Link
https://www.eduonix.com/affiliates/id...

https://www.w3schools.com/nodejs/


https://www.youtube.com/watch?v=XCsS_NVAa1g

https://aws.amazon.com/elasticache/redis/?ch=ns&loc=1

useage
	use cases
	cacheing
	messaging cues
	any short lived data in your application
		web application sessions
		
		
???Redis HyperLogLog


In computing, a distributed cache is an extension of the traditional concept of cache used in a single locale. A distributed cache may span multiple servers so that it can grow in size and in transactional capacity. It is mainly used to store application data residing in database and web session data.



The distributed architecture allows incremental expansion/scaling by adding more computers to the cluster, allowing the cache to grow in step with the data growth. A distributed cache pools the RAM of multiple computers into a single in-memory data store used as a data cache to provide fast access to data.






